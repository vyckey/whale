package com.hoily.service.whale.acl.openai.request;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Lists;
import lombok.AccessLevel;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

/**
 * <a href="https://platform.openai.com/docs/api-reference/chat/create">Creates a completion for the chat message</a>
 *
 * @author vyckey
 * 2023/3/2 11:31
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
@Data
@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class ChatCompletionRequest implements Serializable {
    /**
     * ID of the model to use. Currently, only gpt-3.5-turbo and gpt-3.5-turbo-0301 are supported.
     */
    private String model;

    /**
     * The messages to generate chat completions for, in the <a href="https://platform.openai.com/docs/guides/chat/introduction">chat format</a>.
     */
    private final List<ChatMessage> messages = Lists.newArrayListWithExpectedSize(1);

    /**
     * Defaults to 1.
     * <p>What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
     * while lower values like 0.2 will make it more focused and deterministic.</p>
     * <p>We generally recommend altering this or top_p but not both.</p>
     */
    private Float temperature;

    /**
     * Defaults to 1
     * <p>An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of
     * the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.</p>
     * <p>We generally recommend altering this or temperature but not both.</p>
     */
    @JsonProperty("top_p")
    private Float topProbability;

    /**
     * Defaults to 1.
     * <p>How many chat completion choices to generate for each input message.</p>
     */
    @JsonProperty("n")
    private Integer number;

    /**
     * Defaults to false
     * <p>If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent
     * events as they become available, with the stream terminated by a data: [DONE] message.</p>
     */
    private Boolean stream;

    /**
     * <p>Up to 4 sequences where the API will stop generating further tokens.</p>
     */
    private Object stop;

    /**
     * Defaults to inf.
     * <p>The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model
     * can return will be (4096 - prompt tokens).</p>
     */
    @JsonProperty("max_tokens")
    private Integer maxTokens;

    /**
     * Defaults to 0.
     * <p>Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,
     * increasing the model's likelihood to talk about new topics.</p>
     */
    @JsonProperty("presence_penalty")
    private Float presencePenalty;

    /**
     * Defaults to 0.
     * <p>Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far,
     * decreasing the model's likelihood to repeat the same line verbatim.</p>
     * <p><a href="https://platform.openai.com/docs/api-reference/parameter-details">
     * See more information about frequency and presence penalties.</a></p>
     */
    @JsonProperty("frequency_penalty")
    private Float frequencyPenalty;

    /**
     * Defaults to 0.
     * <p>Modify the likelihood of specified tokens appearing in the completion.</p>
     * <p>Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value
     * from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling.
     * The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection;
     * values like -100 or 100 should result in a ban or exclusive selection of the relevant token.</p>
     * <p><a href="https://platform.openai.com/docs/api-reference/parameter-details">See more information about frequency and presence penalties.</a></p>
     */
    @JsonProperty("logit_bias")
    private Map<String, Float> logitBias;

    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
     * <a href="https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids">Learn more</a>.
     */
    private String user;

    public ChatCompletionRequest(String model) {
        this.model = model;
    }

    public ChatCompletionRequest(String model, ChatMessage message) {
        this.model = model;
        this.messages.add(message);
    }

    public ChatCompletionRequest addMessage(ChatMessage message) {
        this.messages.add(message);
        return this;
    }
}
